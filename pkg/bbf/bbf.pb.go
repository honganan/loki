// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/bbf/bbf.proto

package bbf

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	logproto "github.com/grafana/loki/v3/pkg/logproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddRequest struct {
	Records map[int32]*AddRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AddRequest) Reset()      { *m = AddRequest{} }
func (*AddRequest) ProtoMessage() {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff31d6a04431524, []int{0}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetRecords() map[int32]*AddRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type AddRecord struct {
	Ref    *logproto.ChunkRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Shard  int32              `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Values []string           `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *AddRecord) Reset()      { *m = AddRecord{} }
func (*AddRecord) ProtoMessage() {}
func (*AddRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff31d6a04431524, []int{1}
}
func (m *AddRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecord.Merge(m, src)
}
func (m *AddRecord) XXX_Size() int {
	return m.Size()
}
func (m *AddRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecord proto.InternalMessageInfo

func (m *AddRecord) GetRef() *logproto.ChunkRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *AddRecord) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *AddRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type AddResponse struct {
	Added bool `protobuf:"varint,1,opt,name=added,proto3" json:"added,omitempty"`
}

func (m *AddResponse) Reset()      { *m = AddResponse{} }
func (*AddResponse) ProtoMessage() {}
func (*AddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff31d6a04431524, []int{2}
}
func (m *AddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResponse.Merge(m, src)
}
func (m *AddResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddResponse proto.InternalMessageInfo

func (m *AddResponse) GetAdded() bool {
	if m != nil {
		return m.Added
	}
	return false
}

type BBFExistsRequest struct {
	Filter string               `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Value  string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Shard  int32                `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Refs   []*logproto.ChunkRef `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (m *BBFExistsRequest) Reset()      { *m = BBFExistsRequest{} }
func (*BBFExistsRequest) ProtoMessage() {}
func (*BBFExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff31d6a04431524, []int{3}
}
func (m *BBFExistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BBFExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BBFExistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BBFExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BBFExistsRequest.Merge(m, src)
}
func (m *BBFExistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *BBFExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BBFExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BBFExistsRequest proto.InternalMessageInfo

func (m *BBFExistsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *BBFExistsRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BBFExistsRequest) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *BBFExistsRequest) GetRefs() []*logproto.ChunkRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

type BBFExistsResponse struct {
	Exists []bool `protobuf:"varint,1,rep,packed,name=exists,proto3" json:"exists,omitempty"`
}

func (m *BBFExistsResponse) Reset()      { *m = BBFExistsResponse{} }
func (*BBFExistsResponse) ProtoMessage() {}
func (*BBFExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff31d6a04431524, []int{4}
}
func (m *BBFExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BBFExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BBFExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BBFExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BBFExistsResponse.Merge(m, src)
}
func (m *BBFExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BBFExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BBFExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BBFExistsResponse proto.InternalMessageInfo

func (m *BBFExistsResponse) GetExists() []bool {
	if m != nil {
		return m.Exists
	}
	return nil
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "bbf.AddRequest")
	proto.RegisterMapType((map[int32]*AddRecord)(nil), "bbf.AddRequest.RecordsEntry")
	proto.RegisterType((*AddRecord)(nil), "bbf.AddRecord")
	proto.RegisterType((*AddResponse)(nil), "bbf.AddResponse")
	proto.RegisterType((*BBFExistsRequest)(nil), "bbf.BBFExistsRequest")
	proto.RegisterType((*BBFExistsResponse)(nil), "bbf.BBFExistsResponse")
}

func init() { proto.RegisterFile("pkg/bbf/bbf.proto", fileDescriptor_9ff31d6a04431524) }

var fileDescriptor_9ff31d6a04431524 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x8a, 0xd3, 0x40,
	0x1c, 0xcf, 0xec, 0x6c, 0xeb, 0xe6, 0x5f, 0xd1, 0xee, 0xa0, 0x25, 0x54, 0x19, 0x4a, 0x5c, 0xa4,
	0x28, 0x24, 0xd0, 0x05, 0x11, 0xf1, 0xb2, 0x91, 0xdd, 0x83, 0xc7, 0x39, 0x89, 0x17, 0x49, 0x76,
	0x26, 0x6d, 0x69, 0xed, 0xd4, 0x99, 0x64, 0x71, 0x2f, 0xe2, 0x23, 0xec, 0x63, 0xf8, 0x28, 0x1e,
	0x7b, 0xdc, 0xa3, 0x4d, 0x2f, 0x1e, 0xfb, 0x08, 0x32, 0x93, 0x34, 0x29, 0xc5, 0x43, 0x60, 0x7e,
	0x1f, 0xf3, 0xfb, 0x7f, 0x4c, 0xe0, 0x74, 0x39, 0x1b, 0x87, 0x49, 0x92, 0x9a, 0x2f, 0x58, 0x2a,
	0x99, 0x49, 0x82, 0x93, 0x24, 0xed, 0x3f, 0x33, 0xfc, 0x5c, 0x8e, 0x2d, 0x55, 0x1f, 0x4a, 0x87,
	0x7f, 0x87, 0x00, 0x2e, 0x38, 0x67, 0xe2, 0x5b, 0x2e, 0x74, 0x46, 0xde, 0xc0, 0x03, 0x25, 0xae,
	0xa5, 0xe2, 0xda, 0x43, 0x03, 0x3c, 0xec, 0x8c, 0x9e, 0x07, 0x26, 0xad, 0x71, 0x04, 0xac, 0x94,
	0x2f, 0x17, 0x99, 0xba, 0x65, 0x3b, 0x73, 0xff, 0x23, 0x3c, 0xdc, 0x17, 0x48, 0x17, 0xf0, 0x4c,
	0xdc, 0x7a, 0x68, 0x80, 0x86, 0x2d, 0x66, 0x8e, 0xe4, 0x0c, 0x5a, 0x37, 0xf1, 0x3c, 0x17, 0xde,
	0xd1, 0x00, 0x0d, 0x3b, 0xa3, 0x47, 0x4d, 0xae, 0xb9, 0xc6, 0x4a, 0xf1, 0xdd, 0xd1, 0x5b, 0xe4,
	0x7f, 0x01, 0xb7, 0xe6, 0xc9, 0x19, 0x60, 0x25, 0x52, 0x1b, 0xd4, 0x19, 0x91, 0xa0, 0xee, 0xfe,
	0xc3, 0x24, 0x5f, 0xcc, 0x98, 0x48, 0x99, 0x91, 0xc9, 0x13, 0x68, 0xe9, 0x49, 0xac, 0xb8, 0x0d,
	0x6f, 0xb1, 0x12, 0x90, 0x1e, 0xb4, 0x6d, 0xaa, 0xf6, 0xf0, 0x00, 0x0f, 0x5d, 0x56, 0x21, 0xff,
	0x05, 0x74, 0x6c, 0x01, 0xbd, 0x94, 0x0b, 0x2d, 0xcc, 0xe5, 0x98, 0x73, 0xc1, 0x6d, 0x91, 0x13,
	0x56, 0x02, 0xff, 0x07, 0x74, 0xa3, 0xe8, 0xea, 0xf2, 0xfb, 0x54, 0x67, 0x7a, 0xb7, 0x9d, 0x1e,
	0xb4, 0xd3, 0xe9, 0x3c, 0x13, 0xca, 0x5a, 0x5d, 0x56, 0x21, 0x93, 0xd0, 0xcc, 0xe6, 0x56, 0xb3,
	0x34, 0x4d, 0xe1, 0xfd, 0xa6, 0x5e, 0xc2, 0xb1, 0x12, 0xa9, 0xf6, 0x8e, 0xed, 0x7a, 0xff, 0x37,
	0x91, 0xd5, 0xfd, 0xd7, 0x70, 0xba, 0x57, 0xbf, 0x6a, 0xb5, 0x07, 0x6d, 0x61, 0x19, 0xfb, 0x3a,
	0x27, 0xac, 0x42, 0x23, 0x09, 0x38, 0x8a, 0xae, 0xc8, 0x2b, 0xc0, 0x17, 0x9c, 0x93, 0xc7, 0x07,
	0x6f, 0xd6, 0xef, 0x36, 0x44, 0x19, 0xe4, 0x3b, 0xe4, 0x3d, 0xb8, 0x75, 0x3e, 0x79, 0x6a, 0x0d,
	0x87, 0xf3, 0xf6, 0x7b, 0x87, 0xf4, 0xee, 0x76, 0xf4, 0x69, 0xb5, 0xa6, 0xce, 0xfd, 0x9a, 0x3a,
	0xdb, 0x35, 0x45, 0x3f, 0x0b, 0x8a, 0x7e, 0x15, 0x14, 0xfd, 0x2e, 0x28, 0x5a, 0x15, 0x14, 0xfd,
	0x29, 0x28, 0xfa, 0x5b, 0x50, 0x67, 0x5b, 0x50, 0x74, 0xb7, 0xa1, 0xce, 0x6a, 0x43, 0x9d, 0xfb,
	0x0d, 0x75, 0x3e, 0xfb, 0xe3, 0x69, 0x36, 0xc9, 0x93, 0xe0, 0x5a, 0x7e, 0x0d, 0xc7, 0x2a, 0x4e,
	0xe3, 0x45, 0x1c, 0xce, 0xe5, 0x6c, 0x1a, 0xde, 0x9c, 0x87, 0xd5, 0xcf, 0x9b, 0xb4, 0xed, 0x36,
	0xce, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x49, 0xad, 0x6e, 0xce, 0x02, 0x00, 0x00,
}

func (this *AddRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddRequest)
	if !ok {
		that2, ok := that.(AddRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (this *AddRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddRecord)
	if !ok {
		that2, ok := that.(AddRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if this.Shard != that1.Shard {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *AddResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddResponse)
	if !ok {
		that2, ok := that.(AddResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Added != that1.Added {
		return false
	}
	return true
}
func (this *BBFExistsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BBFExistsRequest)
	if !ok {
		that2, ok := that.(BBFExistsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Shard != that1.Shard {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	return true
}
func (this *BBFExistsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BBFExistsResponse)
	if !ok {
		that2, ok := that.(BBFExistsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Exists) != len(that1.Exists) {
		return false
	}
	for i := range this.Exists {
		if this.Exists[i] != that1.Exists[i] {
			return false
		}
	}
	return true
}
func (this *AddRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bbf.AddRequest{")
	keysForRecords := make([]int32, 0, len(this.Records))
	for k, _ := range this.Records {
		keysForRecords = append(keysForRecords, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRecords)
	mapStringForRecords := "map[int32]*AddRecord{"
	for _, k := range keysForRecords {
		mapStringForRecords += fmt.Sprintf("%#v: %#v,", k, this.Records[k])
	}
	mapStringForRecords += "}"
	if this.Records != nil {
		s = append(s, "Records: "+mapStringForRecords+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bbf.AddRecord{")
	if this.Ref != nil {
		s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	}
	s = append(s, "Shard: "+fmt.Sprintf("%#v", this.Shard)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bbf.AddResponse{")
	s = append(s, "Added: "+fmt.Sprintf("%#v", this.Added)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BBFExistsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bbf.BBFExistsRequest{")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Shard: "+fmt.Sprintf("%#v", this.Shard)+",\n")
	if this.Refs != nil {
		s = append(s, "Refs: "+fmt.Sprintf("%#v", this.Refs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BBFExistsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bbf.BBFExistsResponse{")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBbf(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BBFClient is the client API for BBF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BBFClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	BBFExists(ctx context.Context, in *BBFExistsRequest, opts ...grpc.CallOption) (*BBFExistsResponse, error)
}

type bBFClient struct {
	cc *grpc.ClientConn
}

func NewBBFClient(cc *grpc.ClientConn) BBFClient {
	return &bBFClient{cc}
}

func (c *bBFClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/bbf.BBF/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBFClient) BBFExists(ctx context.Context, in *BBFExistsRequest, opts ...grpc.CallOption) (*BBFExistsResponse, error) {
	out := new(BBFExistsResponse)
	err := c.cc.Invoke(ctx, "/bbf.BBF/BBFExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BBFServer is the server API for BBF service.
type BBFServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	BBFExists(context.Context, *BBFExistsRequest) (*BBFExistsResponse, error)
}

// UnimplementedBBFServer can be embedded to have forward compatible implementations.
type UnimplementedBBFServer struct {
}

func (*UnimplementedBBFServer) Add(ctx context.Context, req *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedBBFServer) BBFExists(ctx context.Context, req *BBFExistsRequest) (*BBFExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BBFExists not implemented")
}

func RegisterBBFServer(s *grpc.Server, srv BBFServer) {
	s.RegisterService(&_BBF_serviceDesc, srv)
}

func _BBF_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBFServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbf.BBF/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBFServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBF_BBFExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BBFExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBFServer).BBFExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbf.BBF/BBFExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBFServer).BBFExists(ctx, req.(*BBFExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BBF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbf.BBF",
	HandlerType: (*BBFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BBF_Add_Handler,
		},
		{
			MethodName: "BBFExists",
			Handler:    _BBF_BBFExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/bbf/bbf.proto",
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k := range m.Records {
			v := m.Records[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBbf(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintBbf(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBbf(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintBbf(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Shard != 0 {
		i = encodeVarintBbf(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if m.Ref != nil {
		{
			size, err := m.Ref.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBbf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Added {
		i--
		if m.Added {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BBFExistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BBFExistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BBFExistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Refs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBbf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Shard != 0 {
		i = encodeVarintBbf(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBbf(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintBbf(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BBFExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BBFExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BBFExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exists) > 0 {
		for iNdEx := len(m.Exists) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Exists[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintBbf(dAtA, i, uint64(len(m.Exists)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBbf(dAtA []byte, offset int, v uint64) int {
	offset -= sovBbf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBbf(uint64(l))
			}
			mapEntrySize := 1 + sovBbf(uint64(k)) + l
			n += mapEntrySize + 1 + sovBbf(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AddRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ref != nil {
		l = m.Ref.Size()
		n += 1 + l + sovBbf(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovBbf(uint64(m.Shard))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovBbf(uint64(l))
		}
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Added {
		n += 2
	}
	return n
}

func (m *BBFExistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovBbf(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBbf(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovBbf(uint64(m.Shard))
	}
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovBbf(uint64(l))
		}
	}
	return n
}

func (m *BBFExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exists) > 0 {
		n += 1 + sovBbf(uint64(len(m.Exists))) + len(m.Exists)*1
	}
	return n
}

func sovBbf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBbf(x uint64) (n int) {
	return sovBbf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForRecords := make([]int32, 0, len(this.Records))
	for k, _ := range this.Records {
		keysForRecords = append(keysForRecords, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForRecords)
	mapStringForRecords := "map[int32]*AddRecord{"
	for _, k := range keysForRecords {
		mapStringForRecords += fmt.Sprintf("%v: %v,", k, this.Records[k])
	}
	mapStringForRecords += "}"
	s := strings.Join([]string{`&AddRequest{`,
		`Records:` + mapStringForRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddRecord{`,
		`Ref:` + strings.Replace(fmt.Sprintf("%v", this.Ref), "ChunkRef", "logproto.ChunkRef", 1) + `,`,
		`Shard:` + fmt.Sprintf("%v", this.Shard) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddResponse{`,
		`Added:` + fmt.Sprintf("%v", this.Added) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BBFExistsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRefs := "[]*ChunkRef{"
	for _, f := range this.Refs {
		repeatedStringForRefs += strings.Replace(fmt.Sprintf("%v", f), "ChunkRef", "logproto.ChunkRef", 1) + ","
	}
	repeatedStringForRefs += "}"
	s := strings.Join([]string{`&BBFExistsRequest{`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Shard:` + fmt.Sprintf("%v", this.Shard) + `,`,
		`Refs:` + repeatedStringForRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BBFExistsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BBFExistsResponse{`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBbf(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[int32]*AddRecord)
			}
			var mapkey int32
			var mapvalue *AddRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBbf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBbf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBbf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBbf
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBbf
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AddRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBbf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBbf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ref == nil {
				m.Ref = &logproto.ChunkRef{}
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Added = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBbf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BBFExistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BBFExistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BBFExistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBbf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBbf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &logproto.ChunkRef{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BBFExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BBFExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BBFExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBbf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Exists = append(m.Exists, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBbf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBbf
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBbf
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Exists) == 0 {
					m.Exists = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBbf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Exists = append(m.Exists, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBbf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBbf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBbf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBbf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBbf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBbf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBbf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBbf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBbf = fmt.Errorf("proto: unexpected end of group")
)
