// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/bbf/bbf_computer.proto

package bbf

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	logproto "github.com/grafana/loki/v3/pkg/logproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ComputeRequest struct {
	Refs []*logproto.ChunkRef `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (m *ComputeRequest) Reset()      { *m = ComputeRequest{} }
func (*ComputeRequest) ProtoMessage() {}
func (*ComputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_563f2dcd6e75e4d0, []int{0}
}
func (m *ComputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeRequest.Merge(m, src)
}
func (m *ComputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeRequest proto.InternalMessageInfo

func (m *ComputeRequest) GetRefs() []*logproto.ChunkRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

type ComputeResponse struct {
	Processed bool `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (m *ComputeResponse) Reset()      { *m = ComputeResponse{} }
func (*ComputeResponse) ProtoMessage() {}
func (*ComputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_563f2dcd6e75e4d0, []int{1}
}
func (m *ComputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeResponse.Merge(m, src)
}
func (m *ComputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeResponse proto.InternalMessageInfo

func (m *ComputeResponse) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

func init() {
	proto.RegisterType((*ComputeRequest)(nil), "bbf.ComputeRequest")
	proto.RegisterType((*ComputeResponse)(nil), "bbf.ComputeResponse")
}

func init() { proto.RegisterFile("pkg/bbf/bbf_computer.proto", fileDescriptor_563f2dcd6e75e4d0) }

var fileDescriptor_563f2dcd6e75e4d0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xc8, 0x4e, 0xd7,
	0x4f, 0x4a, 0x4a, 0x03, 0xe1, 0xf8, 0xe4, 0xfc, 0xdc, 0x82, 0xd2, 0x92, 0xd4, 0x22, 0xbd, 0x82,
	0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0xa4, 0xa4, 0x34, 0x29, 0x69, 0x90, 0x82, 0x9c, 0xfc, 0x74,
	0xb0, 0x10, 0x9c, 0x01, 0x51, 0xa1, 0x64, 0xc1, 0xc5, 0xe7, 0x0c, 0xd1, 0x13, 0x94, 0x5a, 0x58,
	0x9a, 0x5a, 0x5c, 0x22, 0xa4, 0xc6, 0xc5, 0x52, 0x94, 0x9a, 0x56, 0x2c, 0xc1, 0xa8, 0xc0, 0xac,
	0xc1, 0x6d, 0x24, 0xa4, 0x07, 0xd7, 0xe0, 0x9c, 0x51, 0x9a, 0x97, 0x1d, 0x94, 0x9a, 0x16, 0x04,
	0x96, 0x57, 0xd2, 0xe7, 0xe2, 0x87, 0xeb, 0x2c, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe1,
	0xe2, 0x2c, 0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0x4e, 0x4d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x08, 0x42, 0x08, 0x18, 0xb9, 0x72, 0x71, 0x3b, 0x39, 0xb9, 0x41, 0xf5, 0x14, 0x09, 0x99, 0x71,
	0xb1, 0x43, 0xd9, 0x42, 0xc2, 0x7a, 0x49, 0x49, 0x69, 0x7a, 0xa8, 0xee, 0x90, 0x12, 0x41, 0x15,
	0x84, 0x58, 0xa1, 0xc4, 0xe0, 0x14, 0x71, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f,
	0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x29,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0xbd, 0x28, 0x31, 0x2d, 0x31,
	0x2f, 0x51, 0x3f, 0x27, 0x3f, 0x3b, 0x53, 0xbf, 0xcc, 0x58, 0x1f, 0x1a, 0x80, 0x49, 0x6c, 0x60,
	0x7f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xd0, 0x20, 0xd8, 0x52, 0x01, 0x00, 0x00,
}

func (this *ComputeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeRequest)
	if !ok {
		that2, ok := that.(ComputeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	return true
}
func (this *ComputeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeResponse)
	if !ok {
		that2, ok := that.(ComputeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Processed != that1.Processed {
		return false
	}
	return true
}
func (this *ComputeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bbf.ComputeRequest{")
	if this.Refs != nil {
		s = append(s, "Refs: "+fmt.Sprintf("%#v", this.Refs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bbf.ComputeResponse{")
	s = append(s, "Processed: "+fmt.Sprintf("%#v", this.Processed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBbfComputer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BBFComputerClient is the client API for BBFComputer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BBFComputerClient interface {
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
}

type bBFComputerClient struct {
	cc *grpc.ClientConn
}

func NewBBFComputerClient(cc *grpc.ClientConn) BBFComputerClient {
	return &bBFComputerClient{cc}
}

func (c *bBFComputerClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/bbf.BBFComputer/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BBFComputerServer is the server API for BBFComputer service.
type BBFComputerServer interface {
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
}

// UnimplementedBBFComputerServer can be embedded to have forward compatible implementations.
type UnimplementedBBFComputerServer struct {
}

func (*UnimplementedBBFComputerServer) Compute(ctx context.Context, req *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterBBFComputerServer(s *grpc.Server, srv BBFComputerServer) {
	s.RegisterService(&_BBFComputer_serviceDesc, srv)
}

func _BBFComputer_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBFComputerServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbf.BBFComputer/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBFComputerServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BBFComputer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbf.BBFComputer",
	HandlerType: (*BBFComputerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _BBFComputer_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/bbf/bbf_computer.proto",
}

func (m *ComputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Refs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBbfComputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBbfComputer(dAtA []byte, offset int, v uint64) int {
	offset -= sovBbfComputer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovBbfComputer(uint64(l))
		}
	}
	return n
}

func (m *ComputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Processed {
		n += 2
	}
	return n
}

func sovBbfComputer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBbfComputer(x uint64) (n int) {
	return sovBbfComputer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ComputeRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRefs := "[]*ChunkRef{"
	for _, f := range this.Refs {
		repeatedStringForRefs += strings.Replace(fmt.Sprintf("%v", f), "ChunkRef", "logproto.ChunkRef", 1) + ","
	}
	repeatedStringForRefs += "}"
	s := strings.Join([]string{`&ComputeRequest{`,
		`Refs:` + repeatedStringForRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputeResponse{`,
		`Processed:` + fmt.Sprintf("%v", this.Processed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBbfComputer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ComputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbfComputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbfComputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBbfComputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBbfComputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &logproto.ChunkRef{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbfComputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbfComputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbfComputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbfComputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBbfComputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbfComputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBbfComputer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBbfComputer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbfComputer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbfComputer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBbfComputer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBbfComputer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBbfComputer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBbfComputer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBbfComputer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBbfComputer = fmt.Errorf("proto: unexpected end of group")
)
